/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.example.command.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class OrderReceived extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7138837392335293550L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"OrderReceived\",\"namespace\":\"com.example.command.model\",\"fields\":[{\"name\":\"customerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"item\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"colour\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"price\",\"type\":\"double\"},{\"name\":\"ts_received\",\"type\":\"long\",\"default\":0}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<OrderReceived> ENCODER =
      new BinaryMessageEncoder<OrderReceived>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<OrderReceived> DECODER =
      new BinaryMessageDecoder<OrderReceived>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<OrderReceived> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<OrderReceived> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<OrderReceived> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<OrderReceived>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this OrderReceived to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a OrderReceived from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a OrderReceived instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static OrderReceived fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String customerId;
  @Deprecated public java.lang.String item;
  @Deprecated public java.lang.String colour;
  @Deprecated public double price;
  @Deprecated public long ts_received;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public OrderReceived() {}

  /**
   * All-args constructor.
   * @param customerId The new value for customerId
   * @param item The new value for item
   * @param colour The new value for colour
   * @param price The new value for price
   * @param ts_received The new value for ts_received
   */
  public OrderReceived(java.lang.String customerId, java.lang.String item, java.lang.String colour, java.lang.Double price, java.lang.Long ts_received) {
    this.customerId = customerId;
    this.item = item;
    this.colour = colour;
    this.price = price;
    this.ts_received = ts_received;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return customerId;
    case 1: return item;
    case 2: return colour;
    case 3: return price;
    case 4: return ts_received;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: customerId = value$ != null ? value$.toString() : null; break;
    case 1: item = value$ != null ? value$.toString() : null; break;
    case 2: colour = value$ != null ? value$.toString() : null; break;
    case 3: price = (java.lang.Double)value$; break;
    case 4: ts_received = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'customerId' field.
   * @return The value of the 'customerId' field.
   */
  public java.lang.String getCustomerId() {
    return customerId;
  }


  /**
   * Sets the value of the 'customerId' field.
   * @param value the value to set.
   */
  public void setCustomerId(java.lang.String value) {
    this.customerId = value;
  }

  /**
   * Gets the value of the 'item' field.
   * @return The value of the 'item' field.
   */
  public java.lang.String getItem() {
    return item;
  }


  /**
   * Sets the value of the 'item' field.
   * @param value the value to set.
   */
  public void setItem(java.lang.String value) {
    this.item = value;
  }

  /**
   * Gets the value of the 'colour' field.
   * @return The value of the 'colour' field.
   */
  public java.lang.String getColour() {
    return colour;
  }


  /**
   * Sets the value of the 'colour' field.
   * @param value the value to set.
   */
  public void setColour(java.lang.String value) {
    this.colour = value;
  }

  /**
   * Gets the value of the 'price' field.
   * @return The value of the 'price' field.
   */
  public double getPrice() {
    return price;
  }


  /**
   * Sets the value of the 'price' field.
   * @param value the value to set.
   */
  public void setPrice(double value) {
    this.price = value;
  }

  /**
   * Gets the value of the 'ts_received' field.
   * @return The value of the 'ts_received' field.
   */
  public long getTsReceived() {
    return ts_received;
  }


  /**
   * Sets the value of the 'ts_received' field.
   * @param value the value to set.
   */
  public void setTsReceived(long value) {
    this.ts_received = value;
  }

  /**
   * Creates a new OrderReceived RecordBuilder.
   * @return A new OrderReceived RecordBuilder
   */
  public static com.example.command.model.OrderReceived.Builder newBuilder() {
    return new com.example.command.model.OrderReceived.Builder();
  }

  /**
   * Creates a new OrderReceived RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new OrderReceived RecordBuilder
   */
  public static com.example.command.model.OrderReceived.Builder newBuilder(com.example.command.model.OrderReceived.Builder other) {
    if (other == null) {
      return new com.example.command.model.OrderReceived.Builder();
    } else {
      return new com.example.command.model.OrderReceived.Builder(other);
    }
  }

  /**
   * Creates a new OrderReceived RecordBuilder by copying an existing OrderReceived instance.
   * @param other The existing instance to copy.
   * @return A new OrderReceived RecordBuilder
   */
  public static com.example.command.model.OrderReceived.Builder newBuilder(com.example.command.model.OrderReceived other) {
    if (other == null) {
      return new com.example.command.model.OrderReceived.Builder();
    } else {
      return new com.example.command.model.OrderReceived.Builder(other);
    }
  }

  /**
   * RecordBuilder for OrderReceived instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<OrderReceived>
    implements org.apache.avro.data.RecordBuilder<OrderReceived> {

    private java.lang.String customerId;
    private java.lang.String item;
    private java.lang.String colour;
    private double price;
    private long ts_received;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.example.command.model.OrderReceived.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.customerId)) {
        this.customerId = data().deepCopy(fields()[0].schema(), other.customerId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.item)) {
        this.item = data().deepCopy(fields()[1].schema(), other.item);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.colour)) {
        this.colour = data().deepCopy(fields()[2].schema(), other.colour);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.price)) {
        this.price = data().deepCopy(fields()[3].schema(), other.price);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.ts_received)) {
        this.ts_received = data().deepCopy(fields()[4].schema(), other.ts_received);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing OrderReceived instance
     * @param other The existing instance to copy.
     */
    private Builder(com.example.command.model.OrderReceived other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.customerId)) {
        this.customerId = data().deepCopy(fields()[0].schema(), other.customerId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.item)) {
        this.item = data().deepCopy(fields()[1].schema(), other.item);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.colour)) {
        this.colour = data().deepCopy(fields()[2].schema(), other.colour);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.price)) {
        this.price = data().deepCopy(fields()[3].schema(), other.price);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.ts_received)) {
        this.ts_received = data().deepCopy(fields()[4].schema(), other.ts_received);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'customerId' field.
      * @return The value.
      */
    public java.lang.String getCustomerId() {
      return customerId;
    }


    /**
      * Sets the value of the 'customerId' field.
      * @param value The value of 'customerId'.
      * @return This builder.
      */
    public com.example.command.model.OrderReceived.Builder setCustomerId(java.lang.String value) {
      validate(fields()[0], value);
      this.customerId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'customerId' field has been set.
      * @return True if the 'customerId' field has been set, false otherwise.
      */
    public boolean hasCustomerId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'customerId' field.
      * @return This builder.
      */
    public com.example.command.model.OrderReceived.Builder clearCustomerId() {
      customerId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'item' field.
      * @return The value.
      */
    public java.lang.String getItem() {
      return item;
    }


    /**
      * Sets the value of the 'item' field.
      * @param value The value of 'item'.
      * @return This builder.
      */
    public com.example.command.model.OrderReceived.Builder setItem(java.lang.String value) {
      validate(fields()[1], value);
      this.item = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'item' field has been set.
      * @return True if the 'item' field has been set, false otherwise.
      */
    public boolean hasItem() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'item' field.
      * @return This builder.
      */
    public com.example.command.model.OrderReceived.Builder clearItem() {
      item = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'colour' field.
      * @return The value.
      */
    public java.lang.String getColour() {
      return colour;
    }


    /**
      * Sets the value of the 'colour' field.
      * @param value The value of 'colour'.
      * @return This builder.
      */
    public com.example.command.model.OrderReceived.Builder setColour(java.lang.String value) {
      validate(fields()[2], value);
      this.colour = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'colour' field has been set.
      * @return True if the 'colour' field has been set, false otherwise.
      */
    public boolean hasColour() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'colour' field.
      * @return This builder.
      */
    public com.example.command.model.OrderReceived.Builder clearColour() {
      colour = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'price' field.
      * @return The value.
      */
    public double getPrice() {
      return price;
    }


    /**
      * Sets the value of the 'price' field.
      * @param value The value of 'price'.
      * @return This builder.
      */
    public com.example.command.model.OrderReceived.Builder setPrice(double value) {
      validate(fields()[3], value);
      this.price = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'price' field.
      * @return This builder.
      */
    public com.example.command.model.OrderReceived.Builder clearPrice() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'ts_received' field.
      * @return The value.
      */
    public long getTsReceived() {
      return ts_received;
    }


    /**
      * Sets the value of the 'ts_received' field.
      * @param value The value of 'ts_received'.
      * @return This builder.
      */
    public com.example.command.model.OrderReceived.Builder setTsReceived(long value) {
      validate(fields()[4], value);
      this.ts_received = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'ts_received' field has been set.
      * @return True if the 'ts_received' field has been set, false otherwise.
      */
    public boolean hasTsReceived() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'ts_received' field.
      * @return This builder.
      */
    public com.example.command.model.OrderReceived.Builder clearTsReceived() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public OrderReceived build() {
      try {
        OrderReceived record = new OrderReceived();
        record.customerId = fieldSetFlags()[0] ? this.customerId : (java.lang.String) defaultValue(fields()[0]);
        record.item = fieldSetFlags()[1] ? this.item : (java.lang.String) defaultValue(fields()[1]);
        record.colour = fieldSetFlags()[2] ? this.colour : (java.lang.String) defaultValue(fields()[2]);
        record.price = fieldSetFlags()[3] ? this.price : (java.lang.Double) defaultValue(fields()[3]);
        record.ts_received = fieldSetFlags()[4] ? this.ts_received : (java.lang.Long) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<OrderReceived>
    WRITER$ = (org.apache.avro.io.DatumWriter<OrderReceived>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<OrderReceived>
    READER$ = (org.apache.avro.io.DatumReader<OrderReceived>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.customerId);

    out.writeString(this.item);

    out.writeString(this.colour);

    out.writeDouble(this.price);

    out.writeLong(this.ts_received);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.customerId = in.readString();

      this.item = in.readString();

      this.colour = in.readString();

      this.price = in.readDouble();

      this.ts_received = in.readLong();

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.customerId = in.readString();
          break;

        case 1:
          this.item = in.readString();
          break;

        case 2:
          this.colour = in.readString();
          break;

        case 3:
          this.price = in.readDouble();
          break;

        case 4:
          this.ts_received = in.readLong();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










